<div class="app-container">
	<div id="volume">
		<button id="muteBtn"><i class="fas fa-volume-up"></i></button>
		<div id="volume-bar">
			<input
				type="range"
				id="volumeSlider"
				min="0"
				max="1"
				step="0.01"
				value="1"
			/>
			<div id="volumeIndicator" class="volume-indicator"></div>
		</div>
	</div>
	<img id="albumArt" src="" alt="Album Art" />
	<div id="fade"></div>
	<div id="uiWrap">
		<div class="audio-info">
			<div class="track-info">
				<div id="trackTitle">Track Title</div>
				<div id="bandName">Band Name</div>
				<button id="likeBtn"><i class="far fa-heart"></i></button>
			</div>
			<div class="seek-bar">
				<input
					type="range"
					id="seekSlider"
					min="0"
					step="1"
					value="0"
				/>
				<div id="bufferingIndicator" class="buffering-indicator"></div>
				<div id="seekIndicator" class="seek-indicator"></div>
				<div id="currentTime">0:00</div>
				<div id="trackTime">0:00</div>
			</div>
		</div>
		<div class="audio-controls">
			<div class="playSkip">
				<button id="loopBtn"><i class="fas fa-redo"></i></button>
				<button id="prevBtn"
					><i class="fas fa-step-backward"></i></button
				>
				<button id="playPauseBtn"><i class="fas fa-play"></i></button>
				<button id="nextBtn"><i class="fas fa-step-forward"></i></button
				>
				<button id="shuffleBtn"><i class="fas fa-random"></i></button>
			</div>
		</div>
	</div>
</div>
<script>
	const audio = new Audio();
	let isPlaying = false;

	const playPauseBtn = document.getElementById('playPauseBtn');
	playPauseBtn.addEventListener('click', togglePlayPause);

	// Load tracks using JavaScript
	const tracks = [
		{
			src: 'https://res.cloudinary.com/dohidjhfn/video/upload/v1728286831/Hygiene_orfdqm.mp3',
			albumArt:
				'https://raw.githubusercontent.com/muhammederdem/mini-player/master/img/1.jpg',
			trackTitle: 'Hygiene',
			bandName: 'Joe Charley',
			duration: '2:54', // Format: "minutes:seconds"
		},
		{
			src: 'https://res.cloudinary.com/dohidjhfn/video/upload/v1728286831/XXX_szblqi.mp3',
			albumArt:
				'https://raw.githubusercontent.com/muhammederdem/mini-player/master/img/2.jpg',
			trackTitle: 'XXX',
			bandName: 'Joe Charley',
			duration: '3:25', // Format: "minutes:seconds"
		},
		{
			src: 'https://res.cloudinary.com/dohidjhfn/video/upload/v1728286830/Happy_Birthday_l9a6jw.mp3',
			albumArt:
				'https://raw.githubusercontent.com/muhammederdem/mini-player/master/img/3.jpg',
			trackTitle: 'Happy Birthday',
			bandName: 'Joe Charley',
			duration: '3:54', // Format: "minutes:seconds"
		},
		{
			src: 'https://res.cloudinary.com/dohidjhfn/video/upload/v1728286830/Joey_uex77m.mp3',
			albumArt:
				'https://raw.githubusercontent.com/muhammederdem/mini-player/master/img/4.jpg',
			trackTitle: 'Joey',
			bandName: 'Joe Charley',
			duration: '3:34', // Format: "minutes:seconds"
		},
        {
			src: 'https://res.cloudinary.com/dohidjhfn/video/upload/v1728286830/Good_Day_hfhfbc.mp3',
			albumArt:
				'https://raw.githubusercontent.com/muhammederdem/mini-player/master/img/4.jpg',
			trackTitle: 'Good Day',
			bandName: 'Joe Charley',
			duration: '2:51', // Format: "minutes:seconds"
		},
	];

	let currentTrackIndex = 0;

	function loadTrack(trackIndex) {
		const track = tracks[trackIndex];
		audio.src = track.src;
		document.getElementById('albumArt').src = track.albumArt;
		document.getElementById('trackTitle').textContent = track.trackTitle;
		document.getElementById('bandName').textContent = track.bandName;
		document.getElementById('trackTime').textContent = track.duration;
	}

	loadTrack(currentTrackIndex);

	// Event listener for updating time and buffering indicator
	audio.addEventListener('timeupdate', () => {
		const currentTime = formatTime(audio.currentTime);
		document.getElementById('currentTime').textContent = currentTime;
		document.getElementById('seekSlider').value = audio.currentTime;

		if (audio.buffered.length > 0) {
			const buffered = audio.buffered.end(0);
			const bufferPercent = (buffered / audio.duration) * 100;
			document.getElementById(
				'bufferingIndicator'
			).style.width = `${bufferPercent}%`;
		}

		// Update the seek indicator width based on the current time percentage
		const currentPercent = (audio.currentTime / audio.duration) * 100;
		document.getElementById(
			'seekIndicator'
		).style.width = `${currentPercent}%`;
	});

	function formatTime(timeInSeconds) {
		const minutes = Math.floor(timeInSeconds / 60);
		const seconds = Math.floor(timeInSeconds % 60);
		return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
	}

	// Event listener for seek slider
	const seekSlider = document.getElementById('seekSlider');
	seekSlider.addEventListener('input', handleSeek);

	function handleSeek() {
		const seekTime = parseFloat(seekSlider.value);
		audio.currentTime = seekTime;
	}

	// Event listener for updating the total duration when metadata is loaded
	audio.addEventListener('loadedmetadata', () => {
		seekSlider.max = audio.duration;
		const totalDuration = formatTime(audio.duration);
		document.getElementById('trackTime').textContent = totalDuration;
	});

	// Function to toggle play and pause
	function togglePlayPause() {
		if (isPlaying) {
			audio.pause();
			playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
		} else {
			audio.play();
			playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
		}
		isPlaying = !isPlaying;
	}

	// Event listeners for play and pause
	audio.addEventListener('pause', () => {
		isPlaying = false;
		playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
	});

	audio.addEventListener('play', () => {
		isPlaying = true;
		playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
	});

	// Event listener for track ending
	audio.addEventListener('ended', playNextOrLoop);

	function playNextOrLoop() {
		if (isLooping) {
			// If looping is enabled, replay the current track
			audio.currentTime = 0;
			audio.play();
		} else {
			if (isShuffled) {
				playNextTrackInShuffle();
			} else {
				playNextSequentialTrack();
			}
		}
	}

	// Functions to play next track (either in shuffle or sequential)
	function playNextTrackInShuffle() {
		currentTrackIndex = (currentTrackIndex + 1) % tracks.length;
		loadTrack(currentTrackIndex);
		audio.play();
	}

	function playNextSequentialTrack() {
		if (currentTrackIndex === tracks.length - 1) {
			currentTrackIndex = 0;
		} else {
			currentTrackIndex++;
		}
		loadTrack(currentTrackIndex);
		audio.play();
	}

	// Event listeners for next and previous buttons
	const nextBtn = document.getElementById('nextBtn');
	const prevBtn = document.getElementById('prevBtn');

	nextBtn.addEventListener('click', playNextTrack);
	prevBtn.addEventListener('click', playPreviousTrack);

	function playNextTrack() {
		currentTrackIndex = (currentTrackIndex + 1) % tracks.length;
		loadTrack(currentTrackIndex);
		audio.play();
		isPlaying = true;
	}

	function playPreviousTrack() {
		currentTrackIndex =
			(currentTrackIndex - 1 + tracks.length) % tracks.length;
		loadTrack(currentTrackIndex);
		audio.play();
		isPlaying = true;
	}

	// Event listeners for loop and shuffle buttons
	const shuffleBtn = document.getElementById('shuffleBtn');
	const loopBtn = document.getElementById('loopBtn');

	let isShuffled = false;
	let isLooping = false;

	shuffleBtn.addEventListener('click', toggleShuffle);
	loopBtn.addEventListener('click', toggleLoop);

	function toggleShuffle() {
		isShuffled = !isShuffled;
		shuffleBtn.classList.toggle('active', isShuffled);

		if (isShuffled) {
			shuffleTracks();
		}
	}

	function shuffleTracks() {
		// Fisher-Yates shuffle algorithm
		for (let i = tracks.length - 1; i > 0; i--) {
			const j = Math.floor(Math.random() * (i + 1));
			[tracks[i], tracks[j]] = [tracks[j], tracks[i]];
		}
	}

	function toggleLoop() {
		isLooping = !isLooping;
		loopBtn.classList.toggle('active', isLooping);
		audio.loop = isLooping;
	}

	// Volume control functionality
	const muteBtn = document.getElementById('muteBtn');
	const volumeSlider = document.getElementById('volumeSlider');
	const volumeIndicator = document.getElementById('volumeIndicator');
	const volumeBar = document.getElementById('volume-bar'); // Assuming #volume-bar exists

	let isMuted = false;
	let savedVolume = 1; // Store the volume before muting

	muteBtn.addEventListener('click', toggleMute);
	volumeSlider.addEventListener('input', setVolume);

	function toggleMute() {
		isMuted = !isMuted;
		if (isMuted) {
			savedVolume = audio.volume;
			audio.volume = 0;
			muteBtn.innerHTML = '<i class="fas fa-volume-mute"></i>';
			volumeBar.classList.add('muted'); // Add muted class
		} else {
			audio.volume = savedVolume;
			muteBtn.innerHTML = '<i class="fas fa-volume-up"></i>';
			volumeBar.classList.remove('muted'); // Remove muted class
		}
		volumeSlider.value = isMuted ? 0 : savedVolume;
		muteBtn.classList.toggle('active', isMuted);

		// Update volume indicator width
		updateVolumeIndicator();
	}

	function setVolume() {
		if (!isMuted) {
			audio.volume = volumeSlider.value;
			savedVolume = volumeSlider.value;
		}

		// Update volume indicator width
		updateVolumeIndicator();
	}

	// Function to update the volume indicator width
	function updateVolumeIndicator() {
		const volumePercentage = audio.volume * 100;
		volumeIndicator.style.width = `${volumePercentage}%`;
	}

	// Initialize the volume indicator width on load
	updateVolumeIndicator();

	// Like button functionality
	const likeBtn = document.getElementById('likeBtn');
	let isLiked = false;

	likeBtn.addEventListener('click', function () {
		if (isLiked) {
			likeBtn.classList.remove('liked');
			likeBtn.innerHTML = '<i class="far fa-heart"></i>';
		} else {
			likeBtn.classList.add('liked');
			likeBtn.innerHTML = '<i class="fas fa-heart"></i>';
		}
		isLiked = !isLiked;
	});
</script>
<style>
	:root {
		--color-accent: #fffff;
		--backgroundcolor: #26282c;
		--shadow-dark: #18191b;
		--shadow-light: #34373d;
		--blue: rgba(0, 146, 172, 1);
	}

	/* body {
		font-family: 'Poppins', sans-serif;
		font-size: 15px;
		color: white;
		background: #d9d9d9;
		display: flex;
		align-items: center;
		justify-content: center;
	} */

	i {
		width: 100%;
		text-shadow: -4px -4px 6px var(--shadow-dark),
			4px 4px 6px var(--shadow-light);
	}

	.app-container {
		position: relative;
		background-color: var(--backgroundcolor);
		border-radius: 30px;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.5), 2px 2px 10px rgba(0, 0, 0, 0.5);
		text-align: center;
		overflow: hidden;
		box-sizing: border-box;
		padding-bottom: 20px;
		width: 400px;
	}
	#uiWrap {
		position: relative;
		padding: 0 40px;
		box-sizing: border-box;
		z-index: 3;
		margin-top: -60px;
	}
	#albumArt {
		position: relative;
		z-index: 1;
		width: 100%;
		height: auto;
		border-radius: 15px;
		margin-bottom: -100px;
	}
	#fade {
		position: relative;
		z-index: 2;
		width: 100%;
		height: 100px;
		background: linear-gradient(
			180deg,
			rgba(38, 40, 44, 0) 0%,
			rgba(38, 40, 44, 1) 82%
		);
	}
	#trackTitle {
		font-size: 1.7rem;
	}

	button {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		color: var(--color-accent);
		font-size: 1em;
		font-weight: 400;
		border: none;
		border-radius: 60px;
		height: 2.5rem;
		width: 2.5rem;
		background: var(--backgroundcolor);
		box-shadow: 4px 4px 8px var(--shadow-dark),
			-4px -4px 8px var(--shadow-light);
	}

	button:hover {
		box-shadow: 2px 2px 5px var(--shadow-dark),
			-2px -2px 5px var(--shadow-light);
	}

	button:active {
		background: var(--backgroundcolor);
		box-shadow: inset 2px 2px 5px var(--shadow-dark),
			inset -2px -2px 5px var(--shadow-light);
	}

	.audio-controls {
		text-align: center;
	}

	#playPauseBtn {
		height: 60px;
		width: 60px;
		margin: 0 20px 20px;
	}

	#shuffleBtn.active,
	#loopBtn.active {
		color: var(--blue);
	}

	#volume {
		position: absolute;
		display: flex;
		align-items: center;
		justify-content: left;
		padding: 0;
		top: 10px;
		left: 10px;
		z-index: 3;
		background-color: rgba(0, 0, 0, 0);
	}

	#volume-bar {
		position: relative;
		width: 100px;
		transform: translateY(-3px);
		opacity: 0;
		transition: all 0.3s ease-out;
		transition-delay: 1000ms;
	}
	#volume:hover #volume-bar,
	#volume:active #volume-bar {
		opacity: 1;
		transition: all 0.3s ease-out;
	}
	.muted {
		pointer-events: none;
		opacity: 0.7;
	}

	#muteBtn {
		box-shadow: none;
		background: none;
		font-size: 0.8em;
	}

	#volumeSlider {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 5px;
		margin: 0;
		-webkit-appearance: none;
		-moz-appearance: none;
		-ms-appearance: none;
		appearance: none;
		background: rgba(0, 0, 0, 0.6);
		outline: none;
		border-radius: 10px;
	}

	.volume-indicator {
		position: absolute;
		height: 5px;
		width: 0;
		background: white;
		border-radius: 5px;
		pointer-events: none;
		top: 0;
		left: 0;
	}

	#volumeSlider::-webkit-slider-thumb {
		position: relative;
		-webkit-appearance: none;
		width: 10px;
		height: 10px;
		border-radius: 50%;
		cursor: pointer;
		z-index: 2;
		background: white;
	}

	#volumeSlider::-moz-range-thumb {
		position: relative;
		width: 10px;
		height: 10px;
		border-radius: 50%;
		cursor: pointer;
		z-index: 2;
		background: white;
	}

	#volumeSlider::-ms-thumb {
		width: 10px;
		height: 10px;
		border-radius: 50%;
		cursor: pointer;
		z-index: 2;
		background: white;
	}

	.seek-bar {
		position: relative;
		height: 40px;
	}

	#seekSlider {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 5px;
		margin: 0;
		-webkit-appearance: none;
		-moz-appearance: none;
		-ms-appearance: none;
		appearance: none;
		background: rgba(0, 0, 0, 0.2);
		outline: none;
		border-radius: 10px;
	}

	.buffering-indicator {
		position: absolute;
		top: 0;
		left: 0;
		height: 5px;
		border-radius: 10px;
		background: var(--blue);
		width: 0;
		pointer-events: none;
		z-index: 1;
		opacity: 0.4;
	}

	.seek-indicator {
		position: absolute;
		top: 0;
		left: 0;
		height: 5px;
		background: var(--blue);
		border-radius: 10px;
		pointer-events: none;
		z-index: 1;
		width: 0;
	}

	#seekSlider::-webkit-slider-thumb {
		position: relative;
		-webkit-appearance: none;
		width: 10px;
		height: 10px;
		border-radius: 50%;
		cursor: pointer;
		z-index: 2;
		background: var(--blue);
		box-shadow: 4px 4px 8px var(--shadow-dark),
			-4px -4px 8px var(--shadow-light);
	}

	#seekSlider::-moz-range-thumb {
		position: relative;
		width: 10px;
		height: 10px;
		border-radius: 50%;
		cursor: pointer;
		z-index: 2;
		background: var(--blue);
		box-shadow: 4px 4px 8px var(--shadow-dark),
			-4px -4px 8px var(--shadow-light);
	}

	#seekSlider::-ms-thumb {
		width: 10px;
		height: 10px;
		border-radius: 50%;
		cursor: pointer;
		z-index: 2;
		background: var(--blue);
		box-shadow: 4px 4px 8px var(--shadow-dark),
			-4px -4px 8px var(--shadow-light);
	}

	#seekSlider::-webkit-slider-thumb:hover {
		box-shadow: 2px 2px 5px var(--shadow-dark),
			-2px -2px 5px var(--shadow-light);
	}

	#volumeSlider::-moz-range-thumb:hover {
		box-shadow: 2px 2px 5px var(--shadow-dark),
			-2px -2px 5px var(--shadow-light);
	}

	#volumeSlider::-ms-thumb:hover {
		box-shadow: 2px 2px 5px var(--shadow-dark),
			-2px -2px 5px var(--shadow-light);
	}

	#seekSlider::-moz-range-thumb:hover {
		box-shadow: 2px 2px 5px var(--shadow-dark),
			-2px -2px 5px var(--shadow-light);
	}

	#seekSlider::-ms-thumb:hover {
		box-shadow: 2px 2px 5px var(--shadow-dark),
			-2px -2px 5px var(--shadow-light);
	}

	#currentTime,
	#trackTime {
		position: absolute;
		top: -30px;
		font-size: 0.7em;
	}

	#currentTime {
		left: 0;
	}

	#trackTime {
		right: 0;
	}

	#likeBtn {
		box-shadow: none;
		background: none;
		margin: 10px 20px;
		transition: all 200ms cubic-bezier(0.17, -0.99, 0.61, 1.73);
	}
	#likeBtn:hover {
		transform: scale(1.3);
		transition: all 200ms cubic-bezier(0.17, -0.99, 0.61, 1.73);
	}
	#loopBtn,
	#shuffleBtn {
		box-shadow: none;
		background: none;
		margin: 0 10px;
		font-size: 0.9rem;
	}
</style>
